// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldOryID holds the string denoting the ory_id field in the database.
	FieldOryID = "ory_id"
	// FieldUILanguage holds the string denoting the ui_language field in the database.
	FieldUILanguage = "ui_language"
	// FieldAdmin holds the string denoting the admin field in the database.
	FieldAdmin = "admin"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldOryID,
	FieldUILanguage,
	FieldAdmin,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultAdmin holds the default value on creation for the "admin" field.
	DefaultAdmin bool
)

// UILanguage defines the type for the "ui_language" enum field.
type UILanguage string

// UILanguage values.
const (
	UILanguageAr UILanguage = "ar"
	UILanguageEn UILanguage = "en"
)

func (ul UILanguage) String() string {
	return string(ul)
}

// UILanguageValidator is a validator for the "ui_language" field enum values. It is called by the builders before save.
func UILanguageValidator(ul UILanguage) error {
	switch ul {
	case UILanguageAr, UILanguageEn:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for ui_language field: %q", ul)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByOryID orders the results by the ory_id field.
func ByOryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOryID, opts...).ToFunc()
}

// ByUILanguage orders the results by the ui_language field.
func ByUILanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUILanguage, opts...).ToFunc()
}

// ByAdmin orders the results by the admin field.
func ByAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdmin, opts...).ToFunc()
}
